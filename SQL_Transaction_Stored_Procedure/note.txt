~ ~ ~ ---------- Stored Procedure ---------- ~ ~ ~

    - Block of sql statement and procedural logic (run one after another) that stored in database and can be executed by user or applications 

    - series of task solve in one go 

# Ex - 01

CREATE PROCEDURE hello_world ()
BEGIN
	SELECT "hello world";
END

CALL hello_world()

# Ex - 02 (Create a stored procedural to create a new user)

CREATE PROCEDURE add_user (IN input_name VARCHAR(255), IN input_email VARCHAR(255), OUT message VARCHAR(255))
BEGIN
	DECLARE user_count INTEGER;
    SELECT COUNT(*) INTO user_count 
    FROM users WHERE email = input_email;
    
    IF user_count = 0 THEN 
        INSERT INTO users(name, email)
        VALUES(input_name, input_email);
        SET message = 'user inserted';
	ELSE 
		SET message = 'email already exist';
    END IF;
END	

SET @message = '';
CALL add_user('ankit', 'ankit123@gmail.com', @message);

SELECT @message;

# Ex - 03 (create a stored procedure to show orders by 1 single user )

CREATE PROCEDURE user_orders (IN input_email VARCHAR(255))
BEGIN
	DECLARE id INTEGER;
    SELECT user_id INTO id FROM users WHERE email = input_email;
    
    SELECT * FROM orders WHERE user_id = id;
END

CALL user_orders('ankit@gmail.com')

# Ex - 04 (create a stored procedure to place an order)
    - user_id
    - r_id
    - f_id

CREATE PROCEDURE place_order (IN input_user_id INTEGER, IN input_r_id INTEGER, 
							IN input_f_ids VARCHAR(255), OUT total_amount INTEGER)
BEGIN
	-- insert into orders table 
    DECLARE new_order_id INTEGER;
    DECLARE f_id1 INTEGER;
    DECLARE f_id2 INTEGER;
    
    SET f_id1 = SUBSTRING_INDEX(input_f_ids, ',', 1);
    SET f_id2 = SUBSTRING_INDEX(input_f_ids, ',',-1);
    
    SELECT MAX(order_id) + 1 INTO new_order_id FROM orders;
    SELECT SUM(price) INTO total_amount 
    FROM menu WHERE r_id = input_r_id AND f_id IN (f_id1, f_id2);
    
    INSERT INTO orders(order_id, user_id, r_id, amount, date)
    VALUES(new_order_id, input_user_id, input_r_id, total_amount, DATE(NOW()));
    
    -- insert into order_details table
    INSERT INTO order_details (order_id, f_id) 
    VALUES(new_order_id, f_id1), (new_order_id, f_id2);
    
END

SET @total = 0;
CALL place_order(3, 3, '6,7', @total);
SELECT @total;


~ ~ ~ ---------- Transaction ---------- ~ ~ ~

    - transaction is a sequence of operations that are performed as a single logical unit of work in a database management system
    - multiple query for execute one work 
    - transaction consist of write operations (INSERT, UPDATE, DELETE)

    -- Commit --
        - used to permanently save the changes made by a transaction to the database.
        - When a transaction is committed, all changes made by the transaction are made permanent and be rolled back

    -- Rollback --
        - A rollback command is used to undo the changes made by a transaction and return the database to its state before the transaction began.

    -- Savepoint --
        - A savepoint command is used to mark a specific point within a transaction where a rollback can be performed

    -- Autocommit --
        - automatically commits each individual database transaction as soon as it is completed, rather than requiring an explicit commit command to be issued

# if reconnect to DBMS then memory level change will not happen 

SET autocommit = 0;
INSERT INTO persons(name) VALUES('rishabh');

SELECT * FROM persons