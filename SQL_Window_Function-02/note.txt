~ ~ ~ ---------- RANKING ---------- ~ ~ ~

    - find top 5 batsman of each team
SELECT * FROM (
SELECT BattingTeam, batter, SUM(batsman_run) AS 'total_runs',
DENSE_RANK() OVER(PARTITION BY BattingTeam ORDER BY total_runs DESC) AS 'rank_within_team'
FROM ipl_ball_by_ball_2008_2022
GROUP BY BattingTeam, batter
) t
WHERE t.rank_within_team < 6
ORDER BY t.BattingTeam, t.rank_within_team


~ ~ ~ ---------- CUMULATIVE SUM ---------- ~ ~ ~

    - Virat Kohli run in till 50th, 100th, 200th match
SELECT * FROM (
SELECT 
CONCAT('Match-', CAST(ROW_NUMBER() OVER(ORDER BY ID)AS CHAR)) AS 'match_no',
SUM(batsman_run) AS 'runs_scored',
SUM(SUM(batsman_run)) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 'career_runs'
FROM ipl_ball_by_ball_2008_2022
WHERE batter = 'V Kohli'
GROUP BY ID
) t
WHERE t.match_no = 'Match-50' OR t.match_no = 'Match-100'


~ ~ ~ ---------- CUMULATIVE AVERAGE ---------- ~ ~ ~

SELECT * FROM (
SELECT 
CONCAT('Match-', CAST(ROW_NUMBER() OVER(ORDER BY ID)AS CHAR)) AS 'match_no',
SUM(batsman_run) AS 'runs_scored',
SUM(SUM(batsman_run)) OVER w AS 'career_runs',
AVG(SUM(batsman_run)) OVER w AS 'career_avg'
FROM ipl_ball_by_ball_2008_2022
WHERE batter = 'V Kohli'
GROUP BY ID
WINDOW w AS (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
) t
WHERE t.match_no = 'Match-50' OR t.match_no = 'Match-100'


~ ~ ~ ---------- RUNNING AVERAGE ---------- ~ ~ ~

    - value depend surrounding value (window value)

SELECT * FROM (
SELECT 
CONCAT('Match-', CAST(ROW_NUMBER() OVER(ORDER BY ID)AS CHAR)) AS 'match_no',
SUM(batsman_run) AS 'runs_scored',
SUM(SUM(batsman_run)) OVER w AS 'career_runs',
AVG(SUM(batsman_run)) OVER w AS 'career_avg',
AVG(SUM(batsman_run)) OVER(ROWS BETWEEN 9 PRECEDING AND CURRENT ROW) AS 'rolling_avg'
FROM ipl_ball_by_ball_2008_2022
WHERE batter = 'V Kohli'
GROUP BY ID
WINDOW w AS (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
) t


~ ~ ~ ---------- PERCENT OF TOTAL ---------- ~ ~ ~

SELECT f_name, (total_value / SUM(total_value) OVER()) * 100 AS 'percent_of_total'
FROM (
SELECT f_id, SUM(amount) AS 'total_value'
FROM orders t1
JOIN order_details t2
ON t1.order_id = t2.order_id
WHERE r_id = 1
GROUP BY f_id
) t
JOIN food t3
ON t.f_id = t3.f_id